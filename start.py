from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import TOKEN_API, VIDEO_RATE
from ikb import ikb, ikb2, ikb3, ikb4, ikb5, ikb6, ikb7, ikb8, ikb9, ikb10
from datetime import datetime
import time
import sqlite3




bot = Bot(TOKEN_API)
dp = Dispatcher(bot, storage=MemoryStorage())


class MyStates(StatesGroup):
        request = State()
        summa = State()


# =================================–ü–û–î–ì–†–£–ñ–ê–ï–ú –í–ò–î–û–°–´ –ò –ò–• –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨==========================================

videos = [f'videos/video{i}.mp4' for i in range(1, 7)]
video_durations = [6, 27, 23, 20, 60, 19]


async def on_startup(_):
    print('–í–∞—à –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!')


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.delete()
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è',
                         reply_markup=ikb)



users_data = {}

# ======================================–ö–û–õ–õ–ë–≠–ö –ó–ê–ü–†–û–°–´===============================================

@dp.callback_query_handler()
async def callback_profile(callback: types.CallbackQuery, state: FSMContext):

    

    user_id = callback.from_user.id
    username = callback.from_user.username
    fullname = callback.message.chat.full_name
    
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()

    # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –ø–æ–ª—è–º–∏ id, username –∏ fullname
    cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                  (id INTEGER PRIMARY KEY, 
                  username TEXT,
                  fullname TEXT);''')

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
    cursor.execute("REPLACE INTO users (id, username, fullname) VALUES (?, ?, ?)",
               (user_id, username, fullname))
    conn.commit()

    # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —é–∑–µ—Ä–∞ –ø–æ user_data
    if user_id not in users_data:
        user_data = users_data.setdefault(user_id, {
            'balance': 0,
            'success': 0,
            'current_video': 0,
            'current_duration': 0,
            'last_watch_time': None,    
            'payment_requested': False,
        })
        
    user_data = users_data.get(user_id)
        

    

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ "–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å"


    if callback.data == 'work':
        await callback.message.answer(text=(
            f'‚ùóÔ∏è–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.–í—ã —Å–º–æ–∂–µ—Ç–µ –µ–µ –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –í–∞—à –ø—Ä–æ—Å–º–æ—Ç—Ä \n'
            f'\n'
            f'‚ùóÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å \n'
            f'\n'
            f'üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {VIDEO_RATE} –ª–µ–π\n'
            f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_data["success"]} –∏–∑ 20\n'
            f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π'
        ))
        video_index = user_data['current_video']
        user_data['current_duration'] = video_durations[video_index]
        await callback.message.answer_video(video=open(videos[video_index], 'rb'), reply_markup=ikb6)
        user_data['last_watch_time'] = time.time()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ"

    elif callback.data == 'watching':
        elapsed_time = time.time() - user_data['last_watch_time']
        if elapsed_time >= user_data['current_duration']:
            user_data['balance'] += VIDEO_RATE
            user_data['success'] += 1
            current_video = user_data['current_video']
            await callback.message.answer(text=(
                f'‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω\n'
                f'–ë–∞–ª–∞–Ω—Å: {user_data["balance"] - VIDEO_RATE} –ª–µ–π ‚Üí {user_data["balance"]} –ª–µ–π'
            ))
            if 'watched_before' not in user_data:
                user_data['watched_before'] = True
                user_data['balance'] += 200
                await callback.message.answer(text=(
                    f'üéÅ –ë–æ–Ω—É—Å: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n'
                    f'\n'
                    f'–ë–∞–ª–∞–Ω—Å: {user_data["balance"] - 200} –ª–µ–π ‚Üí {user_data["balance"]} –ª–µ–π \n'
                    f'\n'
                    f'–ó–∞—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤ –æ—Ç –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã!'
                ))
            if current_video < len(videos)-1:
                user_data['current_video'] += 1
                user_data['current_duration'] = video_durations[current_video+1]
                await callback.message.answer(text=(
                    f'üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {VIDEO_RATE} –ª–µ–π\n'
                    f' –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_data["success"]} –∏–∑ 20\n'
                    f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π'
                ))
                await callback.message.answer_video(video=open(videos[current_video+1], 'rb'), reply_markup=ikb6)
                user_data['last_watch_time'] = time.time()
            else:
                await callback.message.answer(text='you watched all the videos!', reply_markup=ikb)
            await callback.message.delete()
        else:
            remaining_time = round(
                user_data['current_duration'] - elapsed_time)
            await callback.answer(f'Wait another {remaining_time} seconds')

    if callback.data == 'stop_watching':
        await callback.message.delete()
        await callback.message.answer(text='–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–æ–∫ —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã—Ö –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤?',
                                      reply_markup=ikb7)

    if callback.data == 'yes_stop':
        await callback.message.delete()
        await callback.message.answer(text=(
            f'üéâ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {user_data["balance"]} –ª–µ–π. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞, —á—Ç–æ –±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥ \n'
            f'\n'
            f'‚ùóÔ∏è–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞! 200L –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¢–∏–∫–¢–æ–∫ –±–æ—Ç–∞. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å 200L , –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ \n'
            f'‚Üì'
        ), reply_markup=ikb8)
    if callback.data == 'no_stop':
        await callback.message.delete()
        await callback.message.answer(text=(
            f'‚ùóÔ∏è–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ" –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.–í—ã —Å–º–æ–∂–µ—Ç–µ –µ–µ –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –í–∞—à –ø—Ä–æ—Å–º–æ—Ç—Ä \n'
            f'\n'
            f'‚ùóÔ∏è–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å \n'
            f'\n'
            f'üì± –¢–∞—Ä–∏—Ñ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {VIDEO_RATE} –ª–µ–π\n'
            f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_data["success"]} –∏–∑ 20\n'
            f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π'
        ))
        video_index = user_data['current_video']
        user_data['current_duration'] = video_durations[video_index]
        await callback.message.answer_video(video=open(videos[video_index], 'rb'), reply_markup=ikb6)
        user_data['last_watch_time'] = time.time()

    if callback.data == 'bonus':
        await callback.message.answer(text=(
            f'üëâ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª —Å–ø–æ–Ω—Å–æ—Ä–∞, –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üí∞ –ü–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å". –í–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ 500 –ª–µ–π!\n'
            f'\n'
            f'https://t.me/aza10chanel\n'
            f'\n'
            f'–ë–ª–∞–≥–æ–¥–∞—Ä—è —Å–ø–æ–Ω—Å–æ—Ä–∞–º, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å, –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è\n'
            f'\n'
            f'‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞ —Å–ø–æ–Ω—Å–æ—Ä–∞, –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ TikTok Pay –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö! \n'
        ), reply_markup=ikb9)

    # if callback.data == 'bonus_no':

    if callback.data == 'check_chanel':
        try:
            member = await bot.get_chat_member(chat_id='@aza10chanel', user_id=user_id)
            if member.status == 'member' or member.status == 'creator' or member.status == 'administrator':
                get_bonus = 200
                await callback.message.answer(text=(
                    f'‚úÖ –í–∞–º –±—ã–ª –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å 200L \n'
                    f'‚Ä¢ –ë–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π ‚Üí {user_data["balance"] + get_bonus} –ª–µ–π \n'
                    f'\n'
                    f'üí∞10 000L+ –Ω–∞ –∫–∞–Ω–∞–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å —Å–µ–π—á–∞—Å \n'
                    f'‚Ä¢ –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ~ 3 –º–∏–Ω—É—Ç—ã\n'
                    f'\n'
                    f'@aza10chanel'
                ), reply_markup=ikb10)
                user_data["balance"] = user_data["balance"] + get_bonus
            else:
                await bot.answer_callback_query(callback.id, text='–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª')
        except Exception as e:
            print(e)
            await bot.answer_callback_query(callback.id, text='–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')

    if callback.data == 'no_instructions':
        await callback.message.delete()
        await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è',
                                      reply_markup=ikb)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–ø—Ä–æ—Ñ–∏–ª—å"
    if callback.data == 'profile':
        await callback.message.delete()
        await callback.message.answer(text=(
            f'üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å:'
            f'\n'
            f'–ò–º—è: {callback.message.chat.full_name}\n'
            f'Username: {callback.message.chat.username}\n'
            f'–ë–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π\n'
            f'–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: {user_data["success"]}\n'
            f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 0\n'
            f'–°—Ç–∞—Ç—É—Å: ‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ωüìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞ –∑–∞ {datetime.now().strftime("%d.%m.%Y")}\n'
            f'\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–æ—Ç–∞: 273,853\n'
            f'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: 20,140,642L\n'
            f'üß† –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ –≤–∏–¥–µ–æ: 530,016\n'
            f'üß† –ù–∞–ø–∏—Å–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: 30,016\n'
        ), reply_markup=ikb2)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–Ω–∞–∑–∞–¥"
    if callback.data == 'btn_back':
        await callback.message.delete()
        await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é ‚§µÔ∏è',
                                      reply_markup=ikb)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–≤—ã–≤–æ–¥"
    if callback.data == 'cash':
        await callback.message.delete()
        await callback.message.answer_video(video=open('cash.mp4', 'rb'),
                                            caption=(
                                                f'–ë–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π \n'
                                                f'\n'
                                                f'–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞, –ª–∏–±–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–µ–Ω–µ–≥ –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º\n'
        ), reply_markup=ikb3)

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–≤—ã–≤–æ–¥"

    # if callback.data == 'btn_cash_payment':
    #     if user_data['payment_requested']:
    #         await callback.message.answer('–í—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã, –æ–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã')
    #         return
    #     await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∫–≤–µ–∑–∏—Ç—ã')
    #     user_data['payment_requested'] = True # –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    #     await state.finish() # –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    #     await MyStates.request.set()

    # @dp.message_handler(state=MyStates.request)
    # async def request_answer(message: types.Message, state: FSMContext):
    #     answer = message.text
    #     user_id = message.from_user.id
    #     await state.update_data(answer1=answer)
    #     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:')
        
    #     await MyStates.next()

    # @dp.message_handler(state=MyStates.summa)
    # async def summa_answer(message: types.Message, state: FSMContext):
    #     data = await state.get_data()
    #     answer1 = (await state.get_data())['answer1']
    #     answer2 = message.text
    #     if not answer2.isdigit():
    #         await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö')
    #         return
    #     if int(answer2) > user_data['balance']:
    #         await message.answer('–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
    #         return
    #     await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç—Ä–µ—Ö –¥–Ω–µ–π')
    #     user_data['balance'] = user_data['balance'] - int(answer2)

    #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    #     session = Session()
    #     payment = Payment(fullname=callback.message.chat.full_name, answer1=answer1, answer2=int(answer2))
    #     session.add(payment)
    #     session.commit()

    #     await state.finish()

    if callback.data == 'btn_cash_payment':
        user_id = callback.from_user.id
        if 'request' not in users_data[user_id]:
            await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã')
            await MyStates.request.set()
        else:
            await callback.message.answer(text='–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã',reply_markup=ikb4)

    @dp.message_handler(state=MyStates.request)
    async def process_request(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        users_data[user_id]['request'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è')
        await MyStates.summa.set()

    @dp.message_handler(state=MyStates.summa)
    async def process_summa(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        user_data = users_data[user_id]
        if 'request' not in user_data:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã')
            await MyStates.request.set()
            return
        if 'summa' in user_data:
            await message.answer('–í—ã —É–∂–µ –≤–≤–µ–ª–∏ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è, –æ–∂–∏–¥–∞–π—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π', 
                                 reply_markup=ikb4)
            return

        summa = message.text

        if not summa.isdigit():
            await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö')
            return
        summa = int(message.text)
        if summa < 100:
            await message.answer('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–Ω—è—Ç–∏—è - 100 –ª–µ–π', reply_markup=ikb4)
            await state.finish()
            return
        if summa > user_data['balance']:
            await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —ç—Ç–æ–π —Å—É–º–º—ã', reply_markup=ikb4)
            return
        user_data['summa'] = summa
        user_data['payment_requested'] = True
        user_data['balance'] -= summa  # –≤—ã—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # Update the database with the user's payment details and requested amount
        conn = sqlite3.connect('payments.db')
        cursor = conn.cursor()

        # —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users —Å –ø–æ–ª—è–º–∏ id, username –∏ fullname
        cursor.execute('''CREATE TABLE IF NOT EXISTS users 
                  (id INTEGER PRIMARY KEY, 
                  username TEXT,
                  payment_details TEXT,
                  payment_sum TEXT);''')

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("REPLACE INTO users (id, username, payment_details, payment_sum) VALUES (?, ?, ?, ?)",
               (user_id, fullname, users_data[user_id]['request'], user_data['summa']))
        conn.commit()

        # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
        
        await message.answer(f'–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –≤—ã–ø–ª–∞—Ç—ã. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data["balance"]} –ª–µ–π')
        
        await state.finish()
    
       
   




    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–∞ - "–ø–∞—Ä—Ç–Ω–µ—Ä—ã"
    if callback.data == 'partners':
        await callback.message.delete()
        await callback.message.answer(text=(
            f'üíº –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n'
            f'\n'
            f'https://t.me/?start=865\n'
            f'\n'
            f'‚úîÔ∏è 100 –ª–µ–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –í–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
            f'‚ûï –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —á–µ–ª–æ–≤–µ–∫: 0\n'
        ), reply_markup=ikb5)

    


# ======================================–ó–ê–ü–£–°–ö –ë–û–¢–ê===============================================

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)